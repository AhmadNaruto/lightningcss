name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true
      tag:
        description: 'Tag'
        required: true
  push:
    tags:
      - 'v*'
  release:
    types: [created]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            libc: ""
            target_dir: target/x86_64-pc-windows-msvc/release
            bin_ext: .exe
            artifact_name: win32-x64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            libc: ""
            target_dir: target/aarch64-pc-windows-msvc/release
            bin_ext: .exe
            artifact_name: win32-arm64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            libc: ""
            target_dir: target/x86_64-unknown-linux-gnu/release
            bin_ext: ""
            artifact_name: linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            libc: ""
            target_dir: target/aarch64-unknown-linux-gnu/release
            bin_ext: ""
            artifact_name: linux-arm64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            libc: musl
            target_dir: target/x86_64-unknown-linux-musl/release
            bin_ext: ""
            artifact_name: linux-musl-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            libc: musl
            target_dir: target/aarch64-unknown-linux-musl/release
            bin_ext: ""
            artifact_name: linux-musl-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            libc: ""
            target_dir: target/x86_64-apple-darwin/release
            bin_ext: ""
            artifact_name: darwin-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            libc: ""
            target_dir: target/aarch64-apple-darwin/release
            bin_ext: ""
            artifact_name: darwin-arm64
          # Target Android aarch64 (arm64)
          - os: ubuntu-latest
            target: aarch64-linux-android
            libc: ""
            target_dir: target/aarch64-linux-android/release
            bin_ext: ""
            artifact_name: android-arm64
          # Target Android armv7 (arm)
          - os: ubuntu-latest
            target: armv7-linux-androideabi
            libc: ""
            target_dir: target/armv7-linux-androideabi/release
            bin_ext: ""
            artifact_name: android-arm

    name: Building ${{ matrix.artifact_name }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Setup Android NDK
        if: contains(matrix.target, 'android')
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r25b
          add-to-path: false

      - name: Set Android ENV for aarch64
        if: matrix.target == 'aarch64-linux-android'
        run: |
          echo "ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang" >> $GITHUB_ENV

      - name: Set Android ENV for armv7
        if: matrix.target == 'armv7-linux-androideabi'
        run: |
          echo "ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo "CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang" >> $GITHUB_ENV

      - name: Install musl-gcc
        if: matrix.libc == 'musl'
        run: sudo apt-get install -y musl-tools

      - name: Install yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install

      - name: Set version
        run: node scripts/set-version.js
        env:
          VERSION: ${{ github.event.inputs.version || github.ref_name }}

      - name: Build
        if: "!contains(matrix.artifact_name, 'android')"
        run: yarn build -t ${{ matrix.target }}
        env:
          MACOSX_DEPLOYMENT_TARGET: '10.13'

      - name: Build Android arm64
        if: matrix.artifact_name == 'android-arm64'
        run: yarn napi build --bin lightningcss --platform --release --features cli --target aarch64-linux-android

      - name: Build Android arm
        if: matrix.artifact_name == 'android-arm'
        run: yarn napi build --bin lightningcss --platform --release --features cli --target armv7-linux-androideabi

      - name: List files
        run: |
          echo "Target directory contents:"
          ls -la ${{ matrix.target_dir }} || true
          echo "Current directory contents:"
          ls -la . || true
          echo "Node addon file:"
          find . -name "lightningcss.${{ matrix.artifact_name }}.node" || true

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: lightningcss-bin-${{ matrix.artifact_name }}
          path: ${{ matrix.target_dir }}/lightningcss${{ matrix.bin_ext }}

      - name: Upload node addon artifact
        uses: actions/upload-artifact@v4
        with:
          name: lightningcss-addon-${{ matrix.artifact_name }}
          path: lightningcss.${{ matrix.artifact_name }}.node

      - name: Check Android binary size
        if: contains(matrix.target, 'android')
        run: ls -lh ${{ matrix.target_dir }}/lightningcss || true

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    # Tags need this permission to create a GitHub Release
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifacts structure
        run: |
          find artifacts -type f | sort

      - name: Move artifacts
        run: |
          mkdir -p release
          mkdir -p bin
          
          # Collect node addons
          find artifacts/lightningcss-addon-* -name "lightningcss.*.node" -exec cp {} release/ \;
          
          # Collect binaries
          for PLATFORM in win32-x64 win32-arm64 linux-x64 linux-arm64 linux-musl-x64 linux-musl-arm64 darwin-x64 darwin-arm64 android-arm64 android-arm; do
            if [ -f "artifacts/lightningcss-bin-$PLATFORM/lightningcss" ]; then
              cp "artifacts/lightningcss-bin-$PLATFORM/lightningcss" "bin/lightningcss-$PLATFORM"
            elif [ -f "artifacts/lightningcss-bin-$PLATFORM/lightningcss.exe" ]; then
              cp "artifacts/lightningcss-bin-$PLATFORM/lightningcss.exe" "bin/lightningcss-$PLATFORM.exe"
            fi
          done
          
          echo "Release directory contents:"
          ls -la release/
          echo "Bin directory contents:"
          ls -la bin/

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup .npmrc
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Set version
        run: node scripts/set-version.js
        env:
          VERSION: ${{ github.event.inputs.version || github.ref_name }}

      - name: Publish
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.event.inputs.tag || github.ref_name }}
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          files: |
            bin/lightningcss-*
            release/lightningcss.*.node
          body: "Release ${{ github.event.inputs.tag || github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

